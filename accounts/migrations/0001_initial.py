# Generated by Django 5.0.4 on 2024-05-03 05:49

import ckeditor_uploader.fields
import django.db.models.deletion
import django.utils.timezone
import embed_video.fields
import image_cropping.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('settings', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='Email')),
                ('first_name', models.CharField(max_length=100, null=True, verbose_name='First Name')),
                ('last_name', models.CharField(max_length=100, null=True, verbose_name='Last Name')),
                ('contact_number', models.CharField(blank=True, max_length=30, null=True, verbose_name='Contact Number')),
                ('trained_by', models.CharField(max_length=200, null=True, verbose_name='Trainer Name')),
                ('services', models.CharField(max_length=500, null=True, verbose_name='Services Offered')),
                ('user_type', models.CharField(choices=[('General User', 'General User'), ('Certified Leader', 'Certified Leader'), ('Certified Teacher', 'Certified Teacher'), ('Certified Master Trainer', 'Certified Master Trainer')], default='General User', max_length=100, verbose_name='User Type')),
                ('profile_pic', models.ImageField(default='members/default.png', upload_to='members/%Y/%m/%d/', verbose_name='Profile Picture')),
                ('pp_cropped', image_cropping.fields.ImageRatioField('profile_pic', '300x300', adapt_rotation=False, allow_fullsize=False, free_crop=True, help_text=None, hide_image_field=False, size_warning=False, verbose_name='pp cropped')),
                ('description', ckeditor_uploader.fields.RichTextUploadingField(null=True, verbose_name=' Description')),
                ('basic_learning_course', models.URLField(blank=True, null=True, verbose_name='Basic Learning Course URL')),
                ('certified_leader_training', models.URLField(blank=True, null=True, verbose_name='Certified Leader Training URL')),
                ('certified_teacher_training', models.URLField(blank=True, null=True, verbose_name='Certified Teacher Training URL')),
                ('website_url', models.CharField(blank=True, max_length=200, null=True, verbose_name='Website URL')),
                ('facebook_url', models.CharField(blank=True, max_length=200, null=True, verbose_name='Facebook URL')),
                ('youtube_url', models.CharField(blank=True, max_length=200, null=True, verbose_name='Youtube URL')),
                ('linkedin_url', models.CharField(blank=True, max_length=200, null=True, verbose_name='LinkedIn URL')),
                ('video_url_1', embed_video.fields.EmbedVideoField(blank=True, null=True, verbose_name='Bottom Video 1')),
                ('video_url_2', embed_video.fields.EmbedVideoField(blank=True, null=True, verbose_name='Bottom Video 2')),
                ('video_url_3', embed_video.fields.EmbedVideoField(blank=True, null=True, verbose_name='Bottom Video 3')),
                ('video_url_4', embed_video.fields.EmbedVideoField(blank=True, null=True, verbose_name='Bottom Video 4')),
                ('token', models.CharField(blank=True, max_length=100, null=True, verbose_name='Token Number')),
                ('views', models.IntegerField(default=0, verbose_name='Views')),
                ('is_ambassador', models.BooleanField(default=False)),
                ('is_masked', models.BooleanField(default=False)),
                ('active', models.BooleanField(default=True)),
                ('staff', models.BooleanField(default=False)),
                ('admin', models.BooleanField(default=False)),
                ('city', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='settings.city')),
                ('country', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='settings.country')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('state', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='settings.state')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
    ]
